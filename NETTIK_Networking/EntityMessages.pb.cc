// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EntityMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EntityMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProtoMessageVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessageVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMessageRPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessageRPC_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EntityMessages_2eproto() {
  protobuf_AddDesc_EntityMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EntityMessages.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoMessageVector_descriptor_ = file->message_type(0);
  static const int ProtoMessageVector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessageVector, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessageVector, y_),
  };
  ProtoMessageVector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtoMessageVector_descriptor_,
      ProtoMessageVector::default_instance_,
      ProtoMessageVector_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtoMessageVector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessageVector, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessageVector, _is_default_instance_));
  ProtoMessageRPC_descriptor_ = file->message_type(1);
  static const int ProtoMessageRPC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessageRPC, val_),
  };
  ProtoMessageRPC_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtoMessageRPC_descriptor_,
      ProtoMessageRPC::default_instance_,
      ProtoMessageRPC_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtoMessageRPC),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessageRPC, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessageRPC, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EntityMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtoMessageVector_descriptor_, &ProtoMessageVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtoMessageRPC_descriptor_, &ProtoMessageRPC::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EntityMessages_2eproto() {
  delete ProtoMessageVector::default_instance_;
  delete ProtoMessageVector_reflection_;
  delete ProtoMessageRPC::default_instance_;
  delete ProtoMessageRPC_reflection_;
}

void protobuf_AddDesc_EntityMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024EntityMessages.proto\"*\n\022ProtoMessageVe"
    "ctor\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"\036\n\017ProtoMessa"
    "geRPC\022\013\n\003val\030\001 \001(\010b\006proto3", 106);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EntityMessages.proto", &protobuf_RegisterTypes);
  ProtoMessageVector::default_instance_ = new ProtoMessageVector();
  ProtoMessageRPC::default_instance_ = new ProtoMessageRPC();
  ProtoMessageVector::default_instance_->InitAsDefaultInstance();
  ProtoMessageRPC::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EntityMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EntityMessages_2eproto {
  StaticDescriptorInitializer_EntityMessages_2eproto() {
    protobuf_AddDesc_EntityMessages_2eproto();
  }
} static_descriptor_initializer_EntityMessages_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ProtoMessageVector::kXFieldNumber;
const int ProtoMessageVector::kYFieldNumber;
#endif  // !_MSC_VER

ProtoMessageVector::ProtoMessageVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMessageVector)
}

void ProtoMessageVector::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ProtoMessageVector::ProtoMessageVector(const ProtoMessageVector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMessageVector)
}

void ProtoMessageVector::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
}

ProtoMessageVector::~ProtoMessageVector() {
  // @@protoc_insertion_point(destructor:ProtoMessageVector)
  SharedDtor();
}

void ProtoMessageVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMessageVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessageVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessageVector_descriptor_;
}

const ProtoMessageVector& ProtoMessageVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EntityMessages_2eproto();
  return *default_instance_;
}

ProtoMessageVector* ProtoMessageVector::default_instance_ = NULL;

ProtoMessageVector* ProtoMessageVector::New(::google::protobuf::Arena* arena) const {
  ProtoMessageVector* n = new ProtoMessageVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoMessageVector::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProtoMessageVector*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool ProtoMessageVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMessageVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMessageVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMessageVector)
  return false;
#undef DO_
}

void ProtoMessageVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMessageVector)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:ProtoMessageVector)
}

::google::protobuf::uint8* ProtoMessageVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessageVector)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessageVector)
  return target;
}

int ProtoMessageVector::ByteSize() const {
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessageVector::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProtoMessageVector* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoMessageVector>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessageVector::MergeFrom(const ProtoMessageVector& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void ProtoMessageVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessageVector::CopyFrom(const ProtoMessageVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessageVector::IsInitialized() const {

  return true;
}

void ProtoMessageVector::Swap(ProtoMessageVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoMessageVector::InternalSwap(ProtoMessageVector* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoMessageVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessageVector_descriptor_;
  metadata.reflection = ProtoMessageVector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoMessageVector

// optional float x = 1;
void ProtoMessageVector::clear_x() {
  x_ = 0;
}
 float ProtoMessageVector::x() const {
  // @@protoc_insertion_point(field_get:ProtoMessageVector.x)
  return x_;
}
 void ProtoMessageVector::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ProtoMessageVector.x)
}

// optional float y = 2;
void ProtoMessageVector::clear_y() {
  y_ = 0;
}
 float ProtoMessageVector::y() const {
  // @@protoc_insertion_point(field_get:ProtoMessageVector.y)
  return y_;
}
 void ProtoMessageVector::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ProtoMessageVector.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ProtoMessageRPC::kValFieldNumber;
#endif  // !_MSC_VER

ProtoMessageRPC::ProtoMessageRPC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMessageRPC)
}

void ProtoMessageRPC::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ProtoMessageRPC::ProtoMessageRPC(const ProtoMessageRPC& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMessageRPC)
}

void ProtoMessageRPC::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  val_ = false;
}

ProtoMessageRPC::~ProtoMessageRPC() {
  // @@protoc_insertion_point(destructor:ProtoMessageRPC)
  SharedDtor();
}

void ProtoMessageRPC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMessageRPC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessageRPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessageRPC_descriptor_;
}

const ProtoMessageRPC& ProtoMessageRPC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EntityMessages_2eproto();
  return *default_instance_;
}

ProtoMessageRPC* ProtoMessageRPC::default_instance_ = NULL;

ProtoMessageRPC* ProtoMessageRPC::New(::google::protobuf::Arena* arena) const {
  ProtoMessageRPC* n = new ProtoMessageRPC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoMessageRPC::Clear() {
  val_ = false;
}

bool ProtoMessageRPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMessageRPC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool val = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &val_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMessageRPC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMessageRPC)
  return false;
#undef DO_
}

void ProtoMessageRPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMessageRPC)
  // optional bool val = 1;
  if (this->val() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->val(), output);
  }

  // @@protoc_insertion_point(serialize_end:ProtoMessageRPC)
}

::google::protobuf::uint8* ProtoMessageRPC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessageRPC)
  // optional bool val = 1;
  if (this->val() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->val(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessageRPC)
  return target;
}

int ProtoMessageRPC::ByteSize() const {
  int total_size = 0;

  // optional bool val = 1;
  if (this->val() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessageRPC::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProtoMessageRPC* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoMessageRPC>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessageRPC::MergeFrom(const ProtoMessageRPC& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.val() != 0) {
    set_val(from.val());
  }
}

void ProtoMessageRPC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessageRPC::CopyFrom(const ProtoMessageRPC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessageRPC::IsInitialized() const {

  return true;
}

void ProtoMessageRPC::Swap(ProtoMessageRPC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoMessageRPC::InternalSwap(ProtoMessageRPC* other) {
  std::swap(val_, other->val_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoMessageRPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessageRPC_descriptor_;
  metadata.reflection = ProtoMessageRPC_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoMessageRPC

// optional bool val = 1;
void ProtoMessageRPC::clear_val() {
  val_ = false;
}
 bool ProtoMessageRPC::val() const {
  // @@protoc_insertion_point(field_get:ProtoMessageRPC.val)
  return val_;
}
 void ProtoMessageRPC::set_val(bool value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:ProtoMessageRPC.val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
