// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoData.proto

#ifndef PROTOBUF_ProtoData_2eproto__INCLUDED
#define PROTOBUF_ProtoData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ProtoData_2eproto();
void protobuf_AssignDesc_ProtoData_2eproto();
void protobuf_ShutdownFile_ProtoData_2eproto();

class NetVector2;
class NetObject;

// ===================================================================

class NetVector2 : public ::google::protobuf::Message {
 public:
  NetVector2();
  virtual ~NetVector2();

  NetVector2(const NetVector2& from);

  inline NetVector2& operator=(const NetVector2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetVector2& default_instance();

  void Swap(NetVector2* other);

  // implements Message ----------------------------------------------

  inline NetVector2* New() const { return New(NULL); }

  NetVector2* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetVector2& from);
  void MergeFrom(const NetVector2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetVector2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:NetVector2)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static NetVector2* default_instance_;
};
// -------------------------------------------------------------------

class NetObject : public ::google::protobuf::Message {
 public:
  NetObject();
  virtual ~NetObject();

  NetObject(const NetObject& from);

  inline NetObject& operator=(const NetObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetObject& default_instance();

  void Swap(NetObject* other);

  // implements Message ----------------------------------------------

  inline NetObject* New() const { return New(NULL); }

  NetObject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetObject& from);
  void MergeFrom(const NetObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .NetVector2 pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  const ::NetVector2& pos() const;
  ::NetVector2* mutable_pos();
  ::NetVector2* release_pos();
  void set_allocated_pos(::NetVector2* pos);

  // optional .NetVector2 vel = 3;
  bool has_vel() const;
  void clear_vel();
  static const int kVelFieldNumber = 3;
  const ::NetVector2& vel() const;
  ::NetVector2* mutable_vel();
  ::NetVector2* release_vel();
  void set_allocated_vel(::NetVector2* vel);

  // @@protoc_insertion_point(class_scope:NetObject)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_vel();
  inline void clear_has_vel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::NetVector2* pos_;
  ::NetVector2* vel_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static NetObject* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NetVector2

// optional float x = 1 [default = 0];
inline bool NetVector2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetVector2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetVector2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetVector2::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float NetVector2::x() const {
  // @@protoc_insertion_point(field_get:NetVector2.x)
  return x_;
}
inline void NetVector2::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:NetVector2.x)
}

// optional float y = 2 [default = 0];
inline bool NetVector2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetVector2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetVector2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetVector2::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float NetVector2::y() const {
  // @@protoc_insertion_point(field_get:NetVector2.y)
  return y_;
}
inline void NetVector2::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:NetVector2.y)
}

// -------------------------------------------------------------------

// NetObject

// required uint32 id = 1;
inline bool NetObject::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetObject::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetObject::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetObject::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 NetObject::id() const {
  // @@protoc_insertion_point(field_get:NetObject.id)
  return id_;
}
inline void NetObject::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:NetObject.id)
}

// optional .NetVector2 pos = 2;
inline bool NetObject::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetObject::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetObject::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetObject::clear_pos() {
  if (pos_ != NULL) pos_->::NetVector2::Clear();
  clear_has_pos();
}
inline const ::NetVector2& NetObject::pos() const {
  // @@protoc_insertion_point(field_get:NetObject.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::NetVector2* NetObject::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::NetVector2;
  }
  // @@protoc_insertion_point(field_mutable:NetObject.pos)
  return pos_;
}
inline ::NetVector2* NetObject::release_pos() {
  clear_has_pos();
  ::NetVector2* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void NetObject::set_allocated_pos(::NetVector2* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:NetObject.pos)
}

// optional .NetVector2 vel = 3;
inline bool NetObject::has_vel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetObject::set_has_vel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetObject::clear_has_vel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetObject::clear_vel() {
  if (vel_ != NULL) vel_->::NetVector2::Clear();
  clear_has_vel();
}
inline const ::NetVector2& NetObject::vel() const {
  // @@protoc_insertion_point(field_get:NetObject.vel)
  return vel_ != NULL ? *vel_ : *default_instance_->vel_;
}
inline ::NetVector2* NetObject::mutable_vel() {
  set_has_vel();
  if (vel_ == NULL) {
    vel_ = new ::NetVector2;
  }
  // @@protoc_insertion_point(field_mutable:NetObject.vel)
  return vel_;
}
inline ::NetVector2* NetObject::release_vel() {
  clear_has_vel();
  ::NetVector2* temp = vel_;
  vel_ = NULL;
  return temp;
}
inline void NetObject::set_allocated_vel(::NetVector2* vel) {
  delete vel_;
  vel_ = vel;
  if (vel) {
    set_has_vel();
  } else {
    clear_has_vel();
  }
  // @@protoc_insertion_point(field_set_allocated:NetObject.vel)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoData_2eproto__INCLUDED
