// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NetVector2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetVector2_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetObject_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoData_2eproto() {
  protobuf_AddDesc_ProtoData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoData.proto");
  GOOGLE_CHECK(file != NULL);
  NetVector2_descriptor_ = file->message_type(0);
  static const int NetVector2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetVector2, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetVector2, y_),
  };
  NetVector2_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetVector2_descriptor_,
      NetVector2::default_instance_,
      NetVector2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetVector2, _has_bits_[0]),
      -1,
      -1,
      sizeof(NetVector2),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetVector2, _internal_metadata_),
      -1);
  NetObject_descriptor_ = file->message_type(1);
  static const int NetObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetObject, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetObject, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetObject, vel_),
  };
  NetObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetObject_descriptor_,
      NetObject::default_instance_,
      NetObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(NetObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetObject, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetVector2_descriptor_, &NetVector2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetObject_descriptor_, &NetObject::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoData_2eproto() {
  delete NetVector2::default_instance_;
  delete NetVector2_reflection_;
  delete NetObject::default_instance_;
  delete NetObject_reflection_;
}

void protobuf_AddDesc_ProtoData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ProtoData.proto\"(\n\nNetVector2\022\014\n\001x\030\001 \001"
    "(\002:\0010\022\014\n\001y\030\002 \001(\002:\0010\"K\n\tNetObject\022\n\n\002id\030\001"
    " \002(\r\022\030\n\003pos\030\002 \001(\0132\013.NetVector2\022\030\n\003vel\030\003 "
    "\001(\0132\013.NetVector2", 136);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoData.proto", &protobuf_RegisterTypes);
  NetVector2::default_instance_ = new NetVector2();
  NetObject::default_instance_ = new NetObject();
  NetVector2::default_instance_->InitAsDefaultInstance();
  NetObject::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoData_2eproto {
  StaticDescriptorInitializer_ProtoData_2eproto() {
    protobuf_AddDesc_ProtoData_2eproto();
  }
} static_descriptor_initializer_ProtoData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int NetVector2::kXFieldNumber;
const int NetVector2::kYFieldNumber;
#endif  // !_MSC_VER

NetVector2::NetVector2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetVector2)
}

void NetVector2::InitAsDefaultInstance() {
}

NetVector2::NetVector2(const NetVector2& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetVector2)
}

void NetVector2::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetVector2::~NetVector2() {
  // @@protoc_insertion_point(destructor:NetVector2)
  SharedDtor();
}

void NetVector2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetVector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetVector2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetVector2_descriptor_;
}

const NetVector2& NetVector2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

NetVector2* NetVector2::default_instance_ = NULL;

NetVector2* NetVector2::New(::google::protobuf::Arena* arena) const {
  NetVector2* n = new NetVector2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetVector2::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NetVector2*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetVector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetVector2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetVector2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetVector2)
  return false;
#undef DO_
}

void NetVector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetVector2)
  // optional float x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetVector2)
}

::google::protobuf::uint8* NetVector2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetVector2)
  // optional float x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetVector2)
  return target;
}

int NetVector2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional float x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetVector2::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetVector2* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NetVector2>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetVector2::MergeFrom(const NetVector2& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NetVector2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetVector2::CopyFrom(const NetVector2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetVector2::IsInitialized() const {

  return true;
}

void NetVector2::Swap(NetVector2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetVector2::InternalSwap(NetVector2* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetVector2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetVector2_descriptor_;
  metadata.reflection = NetVector2_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetVector2

// optional float x = 1 [default = 0];
bool NetVector2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetVector2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void NetVector2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetVector2::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float NetVector2::x() const {
  // @@protoc_insertion_point(field_get:NetVector2.x)
  return x_;
}
 void NetVector2::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:NetVector2.x)
}

// optional float y = 2 [default = 0];
bool NetVector2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetVector2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void NetVector2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetVector2::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float NetVector2::y() const {
  // @@protoc_insertion_point(field_get:NetVector2.y)
  return y_;
}
 void NetVector2::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:NetVector2.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int NetObject::kIdFieldNumber;
const int NetObject::kPosFieldNumber;
const int NetObject::kVelFieldNumber;
#endif  // !_MSC_VER

NetObject::NetObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetObject)
}

void NetObject::InitAsDefaultInstance() {
  pos_ = const_cast< ::NetVector2*>(&::NetVector2::default_instance());
  vel_ = const_cast< ::NetVector2*>(&::NetVector2::default_instance());
}

NetObject::NetObject(const NetObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetObject)
}

void NetObject::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pos_ = NULL;
  vel_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetObject::~NetObject() {
  // @@protoc_insertion_point(destructor:NetObject)
  SharedDtor();
}

void NetObject::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete vel_;
  }
}

void NetObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetObject_descriptor_;
}

const NetObject& NetObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

NetObject* NetObject::default_instance_ = NULL;

NetObject* NetObject::New(::google::protobuf::Arena* arena) const {
  NetObject* n = new NetObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetObject::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    id_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::NetVector2::Clear();
    }
    if (has_vel()) {
      if (vel_ != NULL) vel_->::NetVector2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .NetVector2 pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vel;
        break;
      }

      // optional .NetVector2 vel = 3;
      case 3: {
        if (tag == 26) {
         parse_vel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetObject)
  return false;
#undef DO_
}

void NetObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetObject)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .NetVector2 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos_, output);
  }

  // optional .NetVector2 vel = 3;
  if (has_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->vel_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetObject)
}

::google::protobuf::uint8* NetObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetObject)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .NetVector2 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->pos_, target);
  }

  // optional .NetVector2 vel = 3;
  if (has_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->vel_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetObject)
  return target;
}

int NetObject::ByteSize() const {
  int total_size = 0;

  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  if (_has_bits_[1 / 32] & 6) {
    // optional .NetVector2 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional .NetVector2 vel = 3;
    if (has_vel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vel_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetObject::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NetObject>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetObject::MergeFrom(const NetObject& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      mutable_pos()->::NetVector2::MergeFrom(from.pos());
    }
    if (from.has_vel()) {
      mutable_vel()->::NetVector2::MergeFrom(from.vel());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NetObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetObject::CopyFrom(const NetObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NetObject::Swap(NetObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetObject::InternalSwap(NetObject* other) {
  std::swap(id_, other->id_);
  std::swap(pos_, other->pos_);
  std::swap(vel_, other->vel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetObject_descriptor_;
  metadata.reflection = NetObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetObject

// required uint32 id = 1;
bool NetObject::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetObject::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void NetObject::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetObject::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 NetObject::id() const {
  // @@protoc_insertion_point(field_get:NetObject.id)
  return id_;
}
 void NetObject::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:NetObject.id)
}

// optional .NetVector2 pos = 2;
bool NetObject::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetObject::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void NetObject::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetObject::clear_pos() {
  if (pos_ != NULL) pos_->::NetVector2::Clear();
  clear_has_pos();
}
 const ::NetVector2& NetObject::pos() const {
  // @@protoc_insertion_point(field_get:NetObject.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
 ::NetVector2* NetObject::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::NetVector2;
  }
  // @@protoc_insertion_point(field_mutable:NetObject.pos)
  return pos_;
}
 ::NetVector2* NetObject::release_pos() {
  clear_has_pos();
  ::NetVector2* temp = pos_;
  pos_ = NULL;
  return temp;
}
 void NetObject::set_allocated_pos(::NetVector2* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:NetObject.pos)
}

// optional .NetVector2 vel = 3;
bool NetObject::has_vel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetObject::set_has_vel() {
  _has_bits_[0] |= 0x00000004u;
}
void NetObject::clear_has_vel() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetObject::clear_vel() {
  if (vel_ != NULL) vel_->::NetVector2::Clear();
  clear_has_vel();
}
 const ::NetVector2& NetObject::vel() const {
  // @@protoc_insertion_point(field_get:NetObject.vel)
  return vel_ != NULL ? *vel_ : *default_instance_->vel_;
}
 ::NetVector2* NetObject::mutable_vel() {
  set_has_vel();
  if (vel_ == NULL) {
    vel_ = new ::NetVector2;
  }
  // @@protoc_insertion_point(field_mutable:NetObject.vel)
  return vel_;
}
 ::NetVector2* NetObject::release_vel() {
  clear_has_vel();
  ::NetVector2* temp = vel_;
  vel_ = NULL;
  return temp;
}
 void NetObject::set_allocated_vel(::NetVector2* vel) {
  delete vel_;
  vel_ = vel;
  if (vel) {
    set_has_vel();
  } else {
    clear_has_vel();
  }
  // @@protoc_insertion_point(field_set_allocated:NetObject.vel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
